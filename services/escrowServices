const {
  sendCreateEscrowEmail,
  sendReceiveEscrowEmail,
} = require("../Email/email");
const Escrow = require("../models/Escrow");
const User = require("../models/User");

async function createNewEscrow(
  creatorId,
  creatorRole,
  counterpartyEmail,
  amount,
  description,
  terms
) {
  if (creatorRole !== "buyer" && creatorRole !== "seller") {
    throw new Error('Invalid creator role. Must be "buyer" or "seller".');
  }

  if (!terms || terms.length === 0) {
    throw new Error("Escrow must include terms");
  }

  // Get the creator's info
  const user = await User.findById(creatorId);
  if (!user) throw new Error("User not found");

  const creatorFirstName = user.firstname;
  const creatorEmail = user.email.toLowerCase();
  const counterEmail = counterpartyEmail.toLowerCase();

  console.log("creatorEmail", creatorEmail);
  console.log("counterEmail", counterEmail);
  //  Prevent self-escrow
  if (creatorEmail === counterEmail) {
    throw new Error(
      "You cannot create an escrow with your own email address. Please enter the email of the other party involved in the transaction."
    );
  }

  // Create a new escrow
  const escrow = new Escrow({
    creator: creatorId,
    creatorRole,
    counterpartyEmail,
    amount,
    description,
    terms,
    status: "pending",
  });

  await escrow.save();

  const escrowId = escrow._id;
  const createdAt = escrow.createdAt;

  // Send email to the creator
  await sendCreateEscrowEmail(
    creatorFirstName,
    escrowId,
    amount,
    createdAt,
    creatorRole,
    counterpartyEmail,
    description
  );

  try {
    let counterpartyFirstName;

    const counterpartyUser = await User.findOne({ email: counterEmail });
    counterpartyFirstName = counterpartyUser
      ? counterpartyUser.firstname
      : "User";

    await sendReceiveEscrowEmail(
      creatorFirstName,
      counterpartyFirstName,
      escrowId,
      amount,
      createdAt,
      creatorRole,
      description,
      terms,
      counterEmail
    );
  } catch (error) {
    throw new Error("Error sending email to counterparty: " + error.message);
  }

  return escrow;
}

async function acceptNewEscrow(userId, escrowId) {
  console.log("in the service", escrowId);
  console.log("in the service", userId);
  const escrow = await Escrow.findById(escrowId);
  if (!escrow) throw new Error("Escrow not found");
  if (escrow.status === "active") throw new Error("Escrow already accepted");

  const user = await User.findById(userId);
  if (!user) throw new Error("User not found");

  // Ensure the logged-in user's email matches the counterparty email in the escrow
  if (user.email.toLowerCase() !== escrow.counterpartyEmail.toLowerCase()) {
    throw new Error(
      "Unauthorized: Your email does not match the counterparty email"
    );
  }

  const oppositeRole = escrow.creatorRole === "buyer" ? "seller" : "buyer";

  escrow.counterparty = userId;
  escrow[escrow.creatorRole] = escrow.creator;
  escrow[oppositeRole] = userId;
  escrow.status = "active";

  await escrow.save();

  return escrow;
}

module.exports = {
  createNewEscrow,
  acceptNewEscrow,
};
